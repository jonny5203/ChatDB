apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: chatdb-system
data:
  KAFKA_PROCESS_ROLES: "broker,controller"
  KAFKA_NODE_ID: "1"
  KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
  KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka.chatdb-system.svc.cluster.local:9092"
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
  KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
  KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
  KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-0.kafka.chatdb-system.svc.cluster.local:9093"
  KAFKA_CLUSTER_ID: "MkU1OEE1RjYtQ0U4MS00MzZCLUIxREItMjczM0VFRjFGRkE2"
  KAFKA_LOG_DIRS: "/var/lib/kafka/data"
  KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: chatdb-system
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: apache/kafka:latest
        ports:
        - containerPort: 9092
          name: client
        - containerPort: 9093
          name: controller
        envFrom:
        - configMapRef:
            name: kafka-config
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "exec 3<>/dev/tcp/localhost/9092"
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092"
          initialDelaySeconds: 30
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: chatdb-system
  labels:
    app: kafka
spec:
  selector:
    app: kafka
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
    name: client
  - port: 9093
    targetPort: 9093
    protocol: TCP
    name: controller
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-topic-setup
  namespace: chatdb-system
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: kafka-setup
        image: apache/kafka:latest
        command:
        - sh
        - -c
        - |
          echo "Waiting for Kafka to be ready..."
          while ! /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka.chatdb-system.svc.cluster.local:9092 --list; do
            echo "Still waiting for Kafka..."
            sleep 5
          done
          echo "Kafka is ready! Creating topics..."
          /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka.chatdb-system.svc.cluster.local:9092 --partitions 4 --replication-factor 1 --topic queries
          /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka.chatdb-system.svc.cluster.local:9092 --partitions 4 --replication-factor 1 --topic predictions
          /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka.chatdb-system.svc.cluster.local:9092 --partitions 4 --replication-factor 1 --topic training_jobs
          echo "Topics created successfully."